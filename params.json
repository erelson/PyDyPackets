{"note":"Don't delete this file! It's used internally to help with page regeneration.","name":"PyDyPackets","tagline":"Set of scripts for logging and viewing packets from Dynamixel bus.","body":"Summary\r\n----------------\r\nThe scripts in this repo are for reading, storing, parsing, filtering and plotting the byte-packets used for communication by the Dynamixel series of digital servos created by Robotis.\r\n\r\nThe scripts currently can handle the full instruction set used for talking `to` Dynamixel servos, and supports the settings for various Dynamixel devices.  Currently supported devices are:  \r\n\r\nAX-12, AX-12W, AX-18, AX-S1, RX-24, RX-28, RX-64, MX-28, MX-64, MX-106, EX-106\r\n\r\nThe Scripts\r\n-------------\r\n\r\nThere are six scripts with different purposes, and which use each other to various extents.  These are divided into two groups; those that the user interacts with, and those that are used internally.\r\n\r\nUser-friendly:\r\n\r\n:``PyDyLogger.py``: Monitoring serial port and saving packets to file\r\n:``PyDyParser.py``: Filtering lists of packets by ID, instruction, or command bytes\r\n:``PyDyPlotter.py``: Creating plots from packets; e.g. plots of each servo's position\r\n\r\nEach of these scripts can be called from the command line with various options.  For more info, try ``ScriptName.py -h``\r\n\r\nInternal stuff:\r\n\r\n:``PyDyPackets.py``: Translation, reference data, packet operations\r\n:``PyDyConfig.py``: Parses the config file(s) in ``Config/``.\r\n:``PyDyDevices.py``: Stores translation tables for different devices.\r\n\r\nUsage\r\n-----\r\nThe first thing that needs to be done is to create a config file.  To do this you can copy ``Config/config_example.cfg`` to ``Config/pydypackets.cfg``.  The latter is a required name.  An error is given if this file does not exist.\r\n\r\nWithin the config file, various settings can be found.  To start, set the serial/COM port being used for your setup.  Note that the port specification is OS dependent.  Once you have a config file, you can run stuff!\r\n\r\nThe steps for a couple of envisioned typical use cases are:\r\n\r\n(1) Connect computer to a Dynamixel bus, and save bytes using ``PyDyLogger.py``\r\n(2) Feed the output file into ``PyDyParser.py`` with various flags (``-t`` -> human readable output)\r\n(3) Read the filtered output file in a text editor\r\n\r\nOr:\r\n\r\n1) Connect computer to a Dynamixel bus, and save bytes using ``PyDyLogger.py``\r\n2) Feed the output file into ``PyDyPlotter.py`` with various flags and diagnose problems via plots\r\n\r\nOrigin/Purpose\r\n----------------\r\nDerived from needs discussed here:\r\n\r\nhttp://forums.trossenrobotics.com/showthread.php?5670-Dynamixel-packet-analyzer\r\n\r\nRelevant/Related Projects\r\n------------------------------\r\nhttps://github.com/RyanLowerr/Dynamixel-Python","google":""}